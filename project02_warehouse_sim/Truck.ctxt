#BlueJ class context
comment0.target=Truck
comment0.text=\r\n\ The\ Truck\ class\ represents\ Truck\ objects\ within\ the\ simulation.\ Each\ truck\ will\ move\ from\ warehouse\ to\ warehouse,\ picking\ up\ items\r\n\ depending\ on\ a\ manifest\ randomly\ created\ for\ each\ truck.\ Each\ manifest\ has\ a\ priority\ queue\ of\ manifest\ items\ that\ match\ shipments\ \r\n\ created\ in\ each\ warehouse.\ The\ trucks\ will\ then\ perform\ pickups\ at\ the\ next\ highest\ priority\ manifest\ item.\ Each\ truck\ will\ move\ toward\r\n\ the\ source\ warehouse\ for\ that\ manifest\ item,\ once\ arrived,\ the\ truck\ will\ join\ the\ shortest\ queue\ at\ one\ of\ the\ LoadingDock(s).\r\n\ The\ truck\ will\ wait,\ with\ each\ processed\ truck\ being\ removed\ until\ it\ is\ next.\ For\ picking\ up,\ this\ truck\ will\ then\ find\ the\ shipment\r\n\ and\ add\ it\ to\ a\ Stack\ of\ shipments\ that\ represent\ the\ inside\ of\ the\ Truck.\ If\ the\ next\ shipment\ to\ pickup\r\n\ is\ too\ big\ for\ the\ current\ truck\ size\:\ a\ temporary\ arraylist\ is\ created\ to\ hold\ the\ manifest\ items\ while\ we\ look\ to\ the\ next\r\n\ prority\ manifest\ item\ and\ see\ if\ it\ will\ fit.\ If\ it\ does\ not\ fit\ we\ will\ keep\ trying\ until\ we\ have\ exhausted\ the\ manifest.\ At\ that\ point\ \r\n\ we\ deliver\ despite\ the\ truck\ not\ being\ completely\ full.\ Once\ the\ truck\ is\ full\ we\ set\ is_delivering\ to\ true,\ and\ add\ the\ unused\ manifest\ items\r\n\ in\ the\ temp\ array\ back\ into\ the\ priority\ queue.\ Then\ that\ shipment\ will\ be\ delivered\ to\ the\ destination\ that\ \r\n\ was\ randomly\ chosen\ for\ that\ shipment.\ Once\ arrived\ at\ the\ destination\ the\ shipment\ is\ removed\ from\ the\ stack\ and\ added\ to\ the\ array\ of\ shipments\r\n\ at\ each\ Warehouse.\ Once\ all\ the\ stack\ of\ shipments\ within\ the\ Truck\ is\ exhausted,\ is_delivering\ will\ be\ set\ to\ false\ and\ we\ will\ get\ the\ next\r\n\ priority\ manifest\ item\ and\ continue\ with\ moving\ toward\ it...\ picking\ up...\ delivering...\ etc\ until\ all\ manifest\ items\ within\ the\ manifest\ have\ \r\n\ been\ picked\ up\ and\ delivered.\ At\ this\ point\ we\ are\ done\ and\ we\ exit\ simulation.\r\n\r\n\ @author\ Alexander\ Labell\r\n\ @version\ 1.0\r\n
comment1.params=x\ y\ c\ dmc\ sb_t\ manifest_size
comment1.target=Truck(int,\ int,\ Clock,\ DynamicMapCntrl,\ java.lang.StringBuilder,\ int)
comment10.params=c
comment10.target=void\ set_r(int)
comment11.params=c
comment11.target=void\ set_gr(int)
comment12.params=c
comment12.target=void\ set_b(int)
comment13.params=
comment13.target=Manifest\ get_manifest()
comment13.text=\r\n\ It\ will\ get\ the\ manifest.\r\n\r\n\ @return\ \ \ \ \ \ manifest\r\n
comment14.params=
comment14.target=boolean\ get_status()
comment14.text=\r\n\ It\ will\ get\ the\ status\ of\ the\ Truck,\ whether\ it\ is\ delivering\ or\ picking\ up.\r\n\r\n\ @return\ \ \ \ \ \ true\ or\ false\ depending\ on\ is_delvering\r\n
comment15.params=s
comment15.target=void\ set_status(boolean)
comment15.text=\r\n\ It\ will\ set\ set\ the\ status\ of\ the\ truck.\r\n
comment16.params=
comment16.target=boolean\ get_manifest_status()
comment16.text=\r\n\ it\ will\ get\ the\ manifest\ status\ of\ the\ Truck,\ whether\ it\ has\ completed\ all\ pickups\ and\ deliveries.\r\n\r\n\ @return\ \ \ true\ or\ false\ whether\ the\ manifest\ is\ complete\r\n
comment17.params=
comment17.target=double\ get_truck_xpos()
comment17.text=\r\n\ Get\ the\ truck's\ xpos\r\n\ \r\n\ @return\ \ \ \ \ \ the\ trucks\ xpos\r\n\r\n
comment18.params=
comment18.target=double\ get_truck_ypos()
comment18.text=\r\n\ Get\ the\ truck's\ ypos\r\n\ \r\n\ @return\ \ \ \ \ \ the\ trucks\ ypos\r\n
comment19.params=
comment19.target=void\ move()
comment19.text=\r\n\ The\ move\ method\ is\ called\ each\ hour\ by\ the\ action\ method.\ If\ the\ truck\ is\ not\ delivering\ \r\n\ it\ will\ move\ toward\ the\ source\ Warehouse\ corresponding\ to\ the\ current\r\n\ manifest\ item\ otherwise\ it\ will\ move\ toward\ the\ destination\ warehouse\ corresponding\ to\ each\ shipment\ for\ the\ stack\ of\ shipments\r\n\ within\ each\ truck.\r\n\r\n
comment2.params=ms\ md\ p\ u
comment2.target=void\ set_state(int,\ int,\ int,\ int)
comment20.params=x_difference\ y_difference\ s
comment20.target=boolean\ arrived(double,\ double,\ Warehouse)
comment20.text=\r\n\ Computes\ whether\ the\ truck\ has\ arrived\ at\ its\ source\ or\ destination\ warehouse\ depending\ on\ a\ range.\r\n\ The\ range\ depends\ on\ the\ 1/2\ the\ width\ and\ height\ of\ the\ warehouse.\ If\ the\ x\ difference\ and\ y\ difference\ betwen\ the\ warehouse\r\n\ and\ truck\ are\ within\ this\ range,\ the\ truck\ has\ arrived.\r\n\r\n
comment21.params=
comment21.target=void\ move_destination()
comment21.text=\r\n\ We\ check\ if\ the\ stack\ of\ shipments\ is\ empty,\ if\ so\ we\ have\ finished\ delivering\ and\ we\ set\ is_delivering\ to\ false\ and\r\n\ return\ to\ pickup\ next\ priority\ manifest.\ In\ the\ case\ that\ the\ stack\ of\ shipments\ is\ empty\ and\ the\ truck\ is\ done\ picking\ up\ we\r\n\ set\ manifest_complete\ to\ true\ and\ the\ truck\ is\ done\ with\ the\ simulation.\r\n\ Otherwise,\ we\ get\ the\ top\ of\ the\ shipment\ stack\ within\ the\ truck.\ This\ is\ the\ destination\ warehouse.\ We\ check\ if\ we\ have\r\n\ arrived\ at\ the\ destination.\ The\ arrived\ method\ is\ used\ to\ judge\ this.\ Simply\ put,\ we\ determine\ if\ the\ x_difference\ and\ y_difference\ \r\n\ are\ within\ a\ range\ that\ is\ acceptable\ for\ an\ arrival.\ In\ the\ case\ that\ we\ have\ arrived\ we\ now\ add\ this\ truck\ to\ one\ of\ potentially\ \r\n\ 1-3\ loading\ docks\ at\ the\ warehouse.\ We\ add\ this\ truck\ to\ the\ loading\ dock\ with\ the\ shortest\ line\ (see\ Warehouse\ call\ line_up\ method\ for\ functionality).\ \r\n\ In\ the\ case\ that\ we\ have\ not\ arrived,\ we\ move\ toward\ the\ destination\ warehouse\ by\ finding\ the\ x\ difference\ and\ y\ difference\ \r\n\ from\ the\ destination\ to\ the\ truck's\ current\ position,\ we\ scale\ the\ x\ difference\ and\ y\ difference\ for\ the\ movement\ of\ the\ \r\n\ truck\ in\ the\ x\ and\ y\ for\ each\ iteration\ of\ move()\ to\ move\ the\ truck\ closer\ and\ closer\ to\ its\ destination.\r\n\r\n
comment22.params=
comment22.target=void\ move_source()
comment22.text=\r\n\ We\ check\ if\ the\ priority\ queue\ of\ manifest\ items\ isEmpty().\ In\ the\ case\ that\ it\ is\ the\ situation\ is\ one\ of\ two.\r\n\ Either\ we\ have\ picked\ up\ all\ items,\ or\ we\ have\ exhausted\ all\ possiblities\ of\ shipments\ fitting\ into\ the\ truck\ depending\ \r\n\ on\ the\ size\ and\ load-type\ of\ the\ truck\ in\ question.\ We\ know\ the\ situation\ is\ the\ latter\ if\ the\ priority\ queue\ is\ empty\r\n\ AND\ the\ temporary\ array\ that\ holds\ shipments\ that\ could\ not\ fit\ into\ the\ truck\ is\ not\ empty.\ If\ both\ of\ these\ are\ true\ than\r\n\ we\ are\ not\ done\ because\ there\ are\ still\ manifest\ items\ to\ be\ completed,\ so\ we\ add\ the\ manifest\ items\ from\ the\ array\ back\ into\r\n\ the\ priority\ queue\ and\ continue\ processing.\r\n\ In\ the\ latter\ case,\ if\ the\ temp\ array\ is\ empty\ and\ the\ priority\ queue\ is\ empty,\ we\ are\ done,\ picking\ up.\ We\ set\ is_delivering\ to\ true\r\n\ to\ finish\ dropping\ off\ any\ last\ shipments.\r\n\ \r\n\ Otherwise,\ we\ get\ the\ current\ manifest\ item\ from\ the\ highest\ priority\ manifest\ item\ within\ the\ priority\ queue.\r\n\ This\ is\ the\ source\ warehouse.\ We\ get\ the\ xpos\ and\ ypos\ of\ the\ source\ warehouse.\ Next,\ the\ x\ difference\r\n\ and\ y\ difference\ between\ the\ source\ warehouse\ and\ truck\ is\ computed.\ We\ check\ if\ we\ have\r\n\ arrived\ at\ the\ destination.\ In\ the\ case\ that\ we\ have\ arrived\ we\ now\ add\ this\ truck\ to\ one\ of\ potentially\ \r\n\ 1-3\ loading\ docks\ at\ the\ warehouse.\ We\ add\ this\ truck\ to\ the\ loading\ dock\ with\ the\ shortest\ line\ (see\ Warehouse\ call\ \r\n\ line_up\ method\ for\ functionality).\ In\ the\ case\ that\ we\ have\ not\ arrived,\ we\ move\ toward\ the\ source\ warehouse\ by\ \r\n\ finding\ the\ x\ difference\ and\ y\ difference\ from\ the\ source\ to\ the\ truck's\ current\ position,\ we\ scale\ the\ x\ difference\ \r\n\ and\ y\ difference\ for\ the\ movement\ of\ the\ truck\ in\ the\ x\ and\ y\ for\ each\ iteration\ of\ move()\ to\ move\ the\ truck\ closer\ and\ \r\n\ closer\ to\ its\ source.\r\n\r\n
comment23.params=s
comment23.target=void\ pickup(Shipment)
comment23.text=\r\n\ Each\ pickup\ will\ be\ stored\ into\ a\ stack\ within\ the\ truck\ the\ truck\ keeps\ a\ count\ of\ its\ total\ load\ size\r\n\ and\ increments\ as\ we\ add\ shipments\ to\ it.\ If\ the\ count\ is\ greater\ than\ the\ type\ of\ truck,\ the\ shipment\ could\ not\ fit.\r\n\ Therefore\ we\ add\ the\ manifest\ item\ corresponding\ to\ the\ shipment\ to\ a\ temporary\ array\ list.\ Now\ we\ will\ get\ the\ next\ highest\ priority\r\n\ manifest\ item,\ this\ process\ will\ continue\ until\ we\ find\ one\ that\ can\ fit,\ for\ every\ shipment\ that\ doesn't\ fit\ we\ add\r\n\ its\ manifest\ item\ to\ the\ temp\ array,\ if\ in\ the\ entire\ manifest\ none\ fit,\ than\ we\ simply\ deliver\ what\ we\ can.\r\n\ In\ the\ case\ that\ we\ eventually\ find\ a\ fit,\ then\ we\ must\ add\ the\ manifest\ items\ in\ the\ temporary\ array\r\n\ back\ to\ the\ main\ priority\ queue.\ In\ the\ case\ that\ we\ exhaust\ all\ possiblities\ and\ the\ temp\ array\ contains\ manifest\ items\r\n\ we\ accept\ that\ the\ truck\ will\ deliver\ with\ a\ non-full\ load.\r\n\ \r\n\ @param\ s\ \ \ the\ shipment\ picked\ up\ at\ the\ warehouse\ in\ accordance\ with\ the\ manifest\r\n\r\n
comment24.params=
comment24.target=Shipment\ unload()
comment24.text=\r\n\ We\ unload\ the\ truck\ by\ removing\ the\ top\ of\ the\ shipments\ stack.\r\n\ \r\n\ @return\ \ \ \ \ \ the\ shipment\ to\ be\ added\ to\ the\ warehouse\ stores\r\n\r\n
comment25.params=g
comment25.target=void\ draw(java.awt.Graphics)
comment26.params=
comment26.target=int\ log_status()
comment3.params=
comment3.target=void\ action()
comment3.text=\r\n\ The\ action\ method\ is\ called\ each\ hour.\ It\ will\ call\ the\ move\ method\ which\ moves\ toward\ the\ source\ warehouse\ \r\n\ corresponding\ to\ the\ current\ manifest\ item\ if\ we\ are\ delivering.\ Otherwise\ it\ will\ move\ toward\ the\ destination\ warehouse.\r\n\ The\ method\ uses\ dmc.refresh()\ to\ refresh\ the\ screen\ to\ see\ the\ Truck's\ position\ being\ updated\ and\ Thread.sleep(5)\ is\ used\ to\ \r\n\ wait\ for\ ~10\ ms\ to\ view\ the\ Trucks\ moving\ on\ the\ screen.\r\n\r\n
comment4.params=sb_t
comment4.target=void\ write_truck_data(java.lang.StringBuilder)
comment5.params=
comment5.target=java.util.Stack\ get_shipments()
comment5.text=\r\n\ Get\ stack\ of\ shipments\ within\ the\ truck.\r\n\r\n\ @return\ \ Stack\r\n
comment6.params=
comment6.target=boolean\ set_curr_manifest_item()
comment6.text=\r\n\ Sets\ the\ current\ manifest\ item\ being\ picked-up\ depending\ on\ the\ highest\ priority\ manifest\ item\ within\ the\ manifest.\r\n\r\n
comment7.params=
comment7.target=int\ get_type()
comment7.text=\r\n\ Return\ the\ type\ of\ Truck,\ whether\ it\ is\ 1-load,\ 2-load\ ...\ 5-load\ \r\n\r\n\ @return\ \ \ \ the\ type\ of\ truck\ 1-5\r\n
comment8.params=
comment8.target=ManifestItem\ get_curr_manifest_item()
comment8.text=\r\n\ It\ will\ get\ the\ current\ manifest\ item\ being\ processed\ within\ the\ simulation\r\n\ This\ field\ is\ utilized\ exclusively\ for\ pick-ups\r\n\r\n\ @return\ \ \ \ \ \ current\ manifest\ item\r\n
comment9.params=
comment9.target=void\ set_speed()
comment9.text=\r\n\ It\ will\ set\ the\ speed\ of\ the\ Truck\ depending\ on\ the\ type\ of\ Truck.\ 5-load\ trucks\ move\ 1mph,\ 4-load\ 2mph\ and\ so\ on.\r\n\r\n
numComments=27
