#BlueJ class context
comment0.target=Warehouse
comment0.text=\r\n\ Warehouse\ will\ model\ the\ warehouses\ within\ the\ simulation.\ Each\ warehouse\ has\ 1-3\ loading\ docks.\ As\ the\ trucks\ arrive\ they\ will\ be\ added\r\n\ to\ the\ queue\ at\ one\ of\ these\ loading\ docks.\ Here\ they\ will\ wait\ until\ they\ are\ next.\ Once\ chosen,\ they\ will\ load\ or\ unload\ their\ cargo\r\n\ depending\ on\ whether\ they\ are\ delivering\ or\ not.\r\n\r\n\ @author\ Alexander\ Labell\r\n\ @version\ 1.0\r\n
comment1.params=x\ y\ c\ w\ h\ sb_w
comment1.target=Warehouse(int,\ int,\ Clock,\ int,\ int,\ java.lang.StringBuilder)
comment10.params=
comment10.target=int\ get_height()
comment10.text=\r\n\ Get\ warehouse\ height.\r\n\ \r\n\ @return\ \ \ \ height\ of\ warehouse\r\n\r\n
comment11.params=trucks
comment11.target=void\ init_shipments(Truck[])
comment11.text=\r\n\ Generates\ the\ shipments\ at\ the\ warehouse\ corresponding\ to\ a\ source\ warehouse\ on\ a\ manifest\ item.\r\n\ Thus,\ loop\ through\ trucks,\ each\ truck\ contains\ a\ manifest\ that\ consists\ of\ each\ shipment,\ giving\ the\ shipment\ a\ source\ and\ \r\n\ a\ destination,\ therefore\ we\ create\ a\ shipment\ at\ the\ warehouse\ specified\ by\ the\ source\ for\ each\ manifest\ item.\r\n\ We\ need\ a\ base\ shipment\ id\ to\ be\ incremented\ each\ time\ we\ create\ a\ new\ shipment.\r\n\ Additionally,\ we\ call\ init_shipments\ once\ we\ know\ that\ all\ the\ trucks\ and\ manifests\ have\ been\ created\ therefore\ \r\n\ we\ do\ not\ call\ it\ in\ the\ constructor.\r\n\ \r\n\ @param\ \ \ \ array\ of\ truck\ objects\r\n\r\n
comment12.params=g
comment12.target=void\ draw(java.awt.Graphics)
comment2.params=s
comment2.target=void\ add_shipment(Shipment)
comment2.text=\r\n\ Add\ a\ shipment\ to\ the\ array\ of\ shipments\ at\ the\ warehouse.\r\n\r\n\ @param\ \ \ \ \ \ \ shipment\ to\ be\ added\r\n
comment3.params=
comment3.target=double\ get_xpos()
comment3.text=\r\n\ Get\ xpos\ of\ the\ warehouse.\r\n\r\n\ @return\ \ \ \ \ \ \ xpos\r\n
comment4.params=
comment4.target=double\ get_ypos()
comment4.text=\r\n\ Get\ ypos\ of\ the\ warehouse.\r\n\r\n\ @param\ \ \ \ \ \ \ ypos\r\n
comment5.params=truck
comment5.target=void\ line_up(Truck)
comment5.text=\r\n\ We\ have\ 1-3\ loading\ docks.\ Each\ loading\ dock\ corresponds\ to\ a\ queue\ of\ Trucks,\ each\ truck\ will\ inspect\ the\ length\ of\ the\ queue\ at\ the\ \r\n\ loading\ dock\ and\ join\ the\ shortest\ queue,\ it\ would\ be\ logical\ for\ a\ truck\ driver\ picking-up/delivering\ goods\ to\ join\ the\ shortest\ line.\r\n\r\n\ @param\ \ \ \ \ \ \ truck\ object\ to\ be\ lined\ up\r\n
comment6.params=
comment6.target=void\ process_arrivals()
comment6.text=\r\n\ This\ method\ is\ called\ each\ hour\ for\ each\ warehouse\ object,\ it\ will\ look\ at\ the\ situation\ at\ the\ loading\ docks\ \r\n\ it\ will\ use\ poll\ to\ remove\ the\ next\ Truck\ for\ each\ loading\ dock\ line\ at\ the\ warehouse\ and\ then\ proceed\ to\ populate\ the\ truck\r\n\ with\ the\ shipment\ according\ to\ the\ manifest\ in\ the\ case\ of\ delivering\ or\ add\ a\ shipment\ to\ its\ own\ stores\ in\ the\ case\ the\ \r\n\ truck\ is\ unloading.\r\n\r\n
comment7.params=sb_w
comment7.target=void\ write_warehouse_data(java.lang.StringBuilder)
comment8.params=
comment8.target=void\ init_loading_docks()
comment8.text=\r\n\ Initializes\ the\ loading\ dock.\r\n\r\n
comment9.params=
comment9.target=int\ get_width()
comment9.text=\r\n\ Get\ warehouse\ width.\r\n\ \r\n\ @return\ \ \ \ width\ of\ warehouse\r\n\r\n
numComments=13
