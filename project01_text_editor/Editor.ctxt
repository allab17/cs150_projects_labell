#BlueJ class context
comment0.target=Editor
comment0.text=\r\n\ The\ following\ class\ is\ the\ top\ level\ class\ for\ Project\ 01.\ Processing\r\n\ begins\ will\ a\ call\ of\ main\ passing\ the\ desired\ type,\ either\ "gap"\ or\r\n\ "linked"\ to\ choose\ the\ GapBuffer\ data\ structure\ as\ opposed\ to\ the\ linked\ list\r\n\ data\ structure.\ Following\ this,\ the\ user\ is\ prompted\ to\ open\ a\ file\ using\ the\ o\ command.\r\n\ When\ the\ user\ does\ this\ the\ file\ of\ their\ choosing\ will\ be\ stored\ to\ the\ data\ structure.\r\n\ Now\ the\ user\ has\ access\ to\ a\ number\ of\ commands\ for\ cursor\ manipulation\ and\ text\ editing.\r\n\ In\ addition\ to\ the\ base\ functionality\ I\ implemented\ a\ backspace\ 'b'\ command\ to\ delete\ characters\r\n\ in\ the\ current\ line.\ The\ program\ will\ then\ compute\ the\ number\ of\ backspaces\ to\ complete\ or\ simply\ \r\n\ move\ one\ if\ none\ were\ specified.\ \r\n\ \r\n\ The\ cursor\ maintains\ its\ position\ between\ lines,\ but\r\n\ it\ will\ reset\ to\ the\ first\ position\ if\ a\ new\ line\ 'ab'\ or\ 'aa'\ is\ used\ as\ expected.\ \r\n\ The\ functionality\ to\ do\ this\ operation\ was\ implemented\ in\ BufferStructure.\r\n\r\n\ @author\ Alexander\ Labell\r\n\ @version\ 1.0\r\n
comment1.params=
comment1.target=Editor()
comment10.params=
comment10.target=java.lang.String\ doc_toString()
comment11.params=index
comment11.target=java.lang.String\ line_toString(int)
comment12.params=
comment12.target=java.lang.String\ get_filename()
comment2.params=str
comment2.target=void\ main(java.lang.String)
comment2.text=\r\n\ The\ main\ method\ is\ the\ entry\ point\ for\ processing.\ The\ user\ passes\ the\ desired\ data\ structure\ into\ main\ and\ main\ will\ prompt\ to\ open\ a\ file\r\n\ When\ the\ user\ complies\ a\ file\ of\ their\ choosing\ will\ be\ loaded\ into\ Buffer\ Structure.\ The\ Scanner\ class\ was\ used\ to\ continue\ prompting\ the\r\n\ user\ for\ input\ until\ the\ 'q'\ command\ is\ asserted\ to\ quit.\ In\ this\ loop,\ there\ are\ several\ methods\ that\ have\ similar\ functionality\ but\ different\ operations.\r\n\ All\ the\ methods\ take\ input\ and\ interpret\ the\ input\ to\ execute\ the\ various\ commands.\ The\ majority\ of\ them\ check\ the\ first\ character\ of\ the\ string\r\n\ and\ then\ use\ substring\ to\ get\ the\ rest\ of\ the\ input.\ For\ example,\ in\ the\ case\ of\ moving\ the\ cursor\ right,\ the\ program\ checks\ if\ the\ user\ has\r\n\ typed\ 'l'\ and\ then\ looks\ further\ to\ see\ if\ there\ are\ any\ integers\ in\ the\ input,\ if\ so\ this\ indicates\ the\ number\ of\ positions\ to\ move\ right\ and\ the\r\n\ program\ parses\ this\ string\ to\ an\ int\ and\ exectutes\ the\ lower\ level\ method.\ \r\n\ \r\n\ The\ clear\ function\ deviates\ slightly.\ It\ creates\ a\ new\ empty\ file\ and\ then\r\n\ loads\ this\ empty\ file\ into\ Buffer\ Structure\ and\ then\ proceeds\ to\ store\ the\ result\ in\ the\ current\ file.\ This\ effectively\ clears\ all\ data\ from\r\n\ the\ current\ file\ and\ allows\ the\ user\ to\ continue\ editing\ from\ sratch.\ \r\n\r\n\ @param\ \ str\ \ a\ string\ that\ represents\ the\ type\ of\ data\ structure\r\n\ @return\ void\r\n
comment3.params=
comment3.target=void\ display_line()
comment3.text=\r\n\ The\ display_line\ method\ will\ print\ the\ current\ line\ in\ the\ structure.\ To\ be\ clear,\ within\ the\ 2-D\ structure.\ display_line\ will\ print\r\n\ the\ line\ at\ the\ cursor_pos\ for\ the\ downwards\ dimension\ of\ the\ array.\ I\ also\ added\ a\ feature\ to\ print\ a\ physical\ cursor\ position\ for\r\n\ viewability\ reasons\ using\ substring\ ->\ current\ cursor_pos.\r\n\r\n\ @return\ void\r\n
comment4.params=t\ user_input
comment4.target=void\ open_file(java.lang.String,\ java.lang.String)
comment4.text=\r\n\ The\ open_file\ method\ will\ check\ if\ the\ user\ input\ begins\ with\ 'o'.\ If\ so\ the\ user\ has\ indicated\ that\ they\ would\ like\ to\ open\ a\ file,\ they\ must\r\n\ follow\ this\ command\ with\ a\ valid\ filename.\ If\ the\ filename\ entered\ is\ not\ valid,\ the\ user\ is\ alerted\ of\ this\ and\ the\ method\ exits.\ If\ the\ filename\r\n\ is\ vlaid\ a\ new\ document\ object\ is\ created\ that\ takes\ the\ filename\ and\ the\ type.\ Finally,the\ files\ contents\ are\ loaded\ into\ the\r\n\ buffer\ structure.\r\n\r\n\ @param\ \ t,\ user_input\ \ t\ is\ the\ type\ of\ data\ structure,\ it\ can\ be\ either\ GapBuffer\ or\ LinkedListBuffer.\r\n\ @return\ void\r\n
comment5.params=input\ file_name
comment5.target=void\ file_io(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ The\ file_io\ method\ is\ called\ in\ the\ loop\ within\ main.\ It\ is\ used\ to\ perform\ file\ IO\ based\ on\ the\ user's\ input.\r\n\ If\ the\ user\ enters\ 'c'\ the\ data\ is\ stored\ into\ the\ file.\ Therefore\ c\ acts\ as\ a\ 'save'\ command\ to\ the\ physical\ file\ itself.\r\n\ It\ uses\ the\ store_file\ method\ implemented\ in\ Document\ to\ write\ the\ data\ to\ the\ file.\ The\ 's'\ command\ is\ used\ to\ create\ a\ new\ file\r\n\ and\ save\ to\ this\ file.\r\n\ @param\ String\ input,\ String\ file_name\r\n\ @return\ void\r\n
comment6.params=input
comment6.target=void\ edit_current(java.lang.String)
comment6.text=\r\n\ The\ edit_current\ method\ will\ contain\ the\ commands\ to\ edit\ and\ manipulate\ text\ within\ a\ line\ itself.\r\n\ To\ add\ new\ text\ to\ a\ line\ the\ user\ asserts\ 'e'\ followed\ by\ the\ text\ they\ desire.\ The\ backspace\ functionality\ using\ 'b'\ was\ also\ implemented.\r\n\ If\ the\ user\ types\ 'b'\ the\ code\ will\ check\ if\ the\ user\ wants\ to\ move\ a\ number\ of\ positions\ by\ using\ length\ and\ substring\ to\ parse\ text\ to\ int.\r\n\ If\ the\ user\ specifies\ a\ number\ of\ characters\ to\ delete\ the\ appropriate\ Document\ method\ will\ be\ called,\ otherwise\ a\ single\ character\ is\ removed.\r\n\ \r\n\r\n\ @param\ \ input\ \ \ \ user\ input\ as\ a\ string\r\n\ @return\ void\r\n
comment7.params=input
comment7.target=void\ cursor_movement(java.lang.String)
comment7.text=\r\n\ The\ cursor_movement\ method\ will\ take\ user\ input\ and\ handle\ the\ cases\ where\ the\ user\ wants\ to\ move\ the\ cursor\ position.\ If\ the\ user\ types\r\n\ 'r'\ the\ cursor\ will\ move\ right.\ If\ the\ user\ types\ r\ and\ specifies\ further\ text\ that\ can\ be\ parsed\ to\ an\ int\ the\ cursor\ will\ be\ moved\r\n\ that\ number\ of\ positions\ to\ the\ right.\ Left\ cursor,\ up\ cursor\ and\ down\ cursor\ use\ similar\ functionality.\ \r\n\r\n\ @param\ \ input\r\n\ @return\ void\r\n
comment8.params=input
comment8.target=void\ edit_lines(java.lang.String)
comment8.text=\r\n\ The\ edit_lines\ method\ will\ insert\ new\ lines\ above\ and\ below\ the\ cursor\ position\ in\ the\ first\ dimension\ of\ the\ data\ structure.\r\n\ When\ the\ user\ asserts\ a\ new\ line\ above\ or\ below\ the\ cursor\ position\ will\ intially\ start\ at\ position\ zero.\ If\ the\ user\ types\ 'dl'\ the\ current\r\n\ line\ will\ be\ deleted.\ If\ the\ user\ specifies\ a\ number\ after\ 'dl'\ that\ number\ will\ be\ parsed\ to\ an\ integer\ and\ the\ current\ line\ +\ n\ lines\ below\r\n\ will\ be\ deleted.\r\n\r\n\ @param\ \ \ input\r\n\ @return\ void\r\n
comment9.params=t\ input
comment9.target=void\ clear_data(java.lang.String,\ java.lang.String)
comment9.text=\r\n\ The\ clear_data\ method\ will\ create\ a\ new\ empty\ file\ and\ load\ this\ empty\ file\ into\ the\ data\ structure\ using\ open_file.\ Then\ the\ data\ is\ stored\r\n\ to\ the\ original\ file\ and\ the\ original\ file\ is\ reopened\r\n\r\n\ @param\ \ \ String\ t,\ String\ input\ \ t\ is\ the\ type\ of\ data\ structure\ and\ input\ is\ user\ input\r\n\ @return\ void\r\n
numComments=13
