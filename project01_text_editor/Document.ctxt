#BlueJ class context
comment0.target=Document
comment0.text=\r\n\ All\ interactions\ with\ data\ structures\ go\ through\ this\ class.\ This\ class\ creates\ a\ new\ BufferStructure\ object\ and\ gives\ this\ object\r\n\ the\ type\ to\ used\ either\ GapBuffer\ or\ LinkedListBuffer.\ The\ class\ loads\ and\ stores\ to\ a\ file,\ therefore\ interactions\ between\ the\ data\ structure\r\n\ ie.\ BufferStructure\ and\ the\ file\ must\ go\ through\ this\ class.\ Additionally,\ note\ that\ some\ functionality\ is\ split\ between\ Document\ and\ DocumentIO\ but\ essentially\r\n\ DocumentIO\ is\ used\ to\ break\ up\ some\ of\ the\ functionality\ required\ for\ the\ structure\ file\ interactions.\r\n\r\n\ @author\ Alexander\ Labell\r\n\ @version\ 1.0\r\n
comment1.params=s\ filename
comment1.target=Document(java.lang.String,\ java.lang.String)
comment10.params=
comment10.target=int\ line_count()
comment10.text=\r\n\ The\ line_count\ method\ will\ get\ the\ cursor\ position\ for\ the\ data\ structure\r\n\r\n\ @return\ int\r\n
comment11.params=
comment11.target=int\ cursor_pos_in_line()
comment11.text=\r\n\ The\ cursor_pos_in_line\ method\ will\ get\ the\ cursor\ position\ in\ the\ line\ in\ question\r\n\r\n\ @return\ int\r\n
comment12.params=
comment12.target=boolean\ cursor_left()
comment12.text=\r\n\ The\ cursor_left\ method\ will\ move\ the\ cursor\ left\ one\ character\r\n\r\n\ @return\ boolean\r\n
comment13.params=char_count
comment13.target=boolean\ cursor_left(int)
comment13.text=\r\n\ The\ cursor_left\ method\ will\ move\ the\ cursor\ left\ char_count\ characters\r\n\r\n\ @param\ char_count\r\n\ @return\ boolean\r\n
comment14.params=
comment14.target=boolean\ cursor_right()
comment14.text=\r\n\ The\ cursor_right\ method\ will\ move\ the\ cursor\ right\ one\ character\r\n\r\n\ @return\ boolean\r\n
comment15.params=char_count
comment15.target=boolean\ cursor_right(int)
comment15.text=\r\n\ The\ cursor_right\ method\ will\ move\ the\ cursor\ right\ char_count\ characters\r\n\r\n\ @param\ char_count\r\n\ @return\ boolean\r\n
comment16.params=
comment16.target=boolean\ cursor_up()
comment16.text=\r\n\ The\ cursor_up\ method\ will\ move\ the\ cursor\ up\ one\ line\r\n\ @return\ boolean\r\n
comment17.params=line_count
comment17.target=boolean\ cursor_up(int)
comment17.text=\r\n\ The\ cursor_up\ method\ will\ move\ the\ cursor\ up\ line_count\ lines\r\n\r\n\ @param\ line_count\r\n\ @return\ boolean\r\n
comment18.params=
comment18.target=boolean\ cursor_down()
comment18.text=\r\n\ The\ cursor_down\ method\ will\ move\ the\ cursor\ down\ one\ line\r\n\r\n\ @return\ boolean\r\n
comment19.params=line_count
comment19.target=boolean\ cursor_down(int)
comment19.text=\r\n\ The\ cursor_down\ method\ will\ move\ the\ cursor\ down\ line_count\ lines\r\n\r\n\ @param\ line_count\r\n\ @return\ boolean\r\n
comment2.params=filename
comment2.target=boolean\ load_file(java.lang.String)
comment2.text=\r\n\ The\ load_file\ method\ will\ load\ the\ contents\ of\ a\ file\ into\ the\ BufferStructure.\ It\ accomplishes\ by\ looping\ through\ the\ file\ and\r\n\ loading\ each\ consecutive\ line\ at\ the\ end\ of\ the\ BufferStructure.\r\n\r\n\ @param\ filename\r\n\ @return\ boolean\r\n
comment20.params=
comment20.target=boolean\ cursor_move_first_line()
comment20.text=\r\n\ The\ cursor_move_first_line\ method\ will\ move\ the\ cursor\ to\ the\ first\ line\r\n\r\n\ @return\ boolean\r\n
comment21.params=
comment21.target=boolean\ cursor_move_last_line()
comment21.text=\r\n\ The\ cursor_move_last_line\ method\ will\ move\ the\ cursor\ to\ the\ last\ line\r\n\r\n\ @return\ boolean\r\n
comment22.params=
comment22.target=boolean\ cursor_move_start_line()
comment22.text=\r\n\ The\ cursor_move_start_line\ method\ will\ move\ the\ cursor\ to\ the\ start\r\n\r\n\ @return\ boolean\r\n
comment23.params=
comment23.target=boolean\ cursor_move_end_line()
comment23.text=\r\n\ The\ cursor_move_end_line\ method\ will\ move\ the\ cursor\ to\ the\ end\r\n\r\n\ @return\ boolean\r\n
comment24.params=
comment24.target=boolean\ insert_line_above()
comment24.text=\r\n\ The\ insert_line_above\ method\ will\ insert\ an\ empty\ line\ above\ the\ current\ line.\r\n\r\n\ @return\ boolean\r\n
comment25.params=
comment25.target=boolean\ insert_line_below()
comment25.text=\r\n\ The\ insert_line_below\ method\ will\ insert\ an\ empty\ line\ below\ the\ current\ line.\r\n\r\n\ @return\ boolean\r\n
comment26.params=
comment26.target=boolean\ remove_line()
comment26.text=\r\n\ The\ remove_line\ method\ will\ remove\ the\ current\ line.\r\n\r\n\ @return\ boolean\r\n
comment27.params=
comment27.target=boolean\ remove_char_toleft()
comment27.text=\r\n\ The\ remove_char_toleft\ method\ will\ remove\ a\ single\ character\ to\ the\ left\ of\ the\ cursor\ position.\r\n\r\n\ @return\ boolean\r\n
comment28.params=char_count
comment28.target=boolean\ remove_char_toleft(int)
comment28.text=\r\n\ The\ remove_char_toleft\ method\ will\ remove\ char_count\ characters\ to\ the\ left\ of\ the\ cursor\ position.\r\n\r\n\ @param\ char_count\r\n\ @return\ boolean\r\n
comment29.params=str_value
comment29.target=boolean\ insert_text(java.lang.String)
comment29.text=\r\n\ The\ insert_text\ method\ will\ insert\ a\ string\ at\ the\ current\ cursor\ position.\r\n\r\n\ @param\ str_value\r\n\ @return\ boolean\r\n
comment3.params=filename
comment3.target=boolean\ store_file(java.lang.String)
comment3.text=\r\n\ The\ store_file\ method\ will\ store\ the\ contents\ of\ the\ BufferStructure\ to\ the\ file.\ It\ accomplishes\ this\ by\ looping\ through\ the\ BufferStructure\r\n\ and\ using\ a\ print\ stream\ and\ the\ println()\ method\ to\ write\ the\ toString()\ of\ the\ current\ line\ in\ question.\r\n\r\n\ @param\ filename\r\n\ @return\ boolean\r\n
comment30.params=char_value
comment30.target=boolean\ insert_text(char)
comment30.text=\r\n\ The\ insert_text\ method\ will\ insert\ a\ character\ at\ the\ current\ cursor\ position.\r\n\r\n\ @param\ char_value\r\n\ @return\ boolean\r\n
comment4.params=
comment4.target=boolean\ store_file()
comment4.text=\r\n\ The\ store_file\ method\ will\ store\ the\ contents\ of\ the\ BufferStructure\ to\ the\ file.\ It\ accomplishes\ this\ by\ looping\ through\ the\ BufferStructure\r\n\ and\ using\ a\ print\ stream\ and\ the\ println()\ method\ to\ write\ the\ toString()\ of\ the\ current\ line\ in\ question.\r\n\r\n\ @return\ boolean\r\n
comment5.params=
comment5.target=java.lang.String\ current_file_name()
comment5.text=\r\n\ The\ current_file_name\ method\ will\ get\ the\ file\ name\ of\ the\ working\ file.\r\n\r\n\ @return\ String\r\n
comment6.params=
comment6.target=java.lang.String\ toStringDocument()
comment6.text=\r\n\ The\ toStringDocument\ method\ will\ get\ the\ contents\ of\ the\ document\ object\ as\ a\ string.\r\n\r\n\ @return\ String\r\n
comment7.params=line_index
comment7.target=java.lang.String\ toStringLine(int)
comment7.text=\r\n\ The\ toStringLine\ method\ will\ get\ the\ contents\ of\ a\ line\ at\ an\ index\ specified\ by\ line_index\r\n\r\n\ @param\ line_index\r\n\ @return\ String\r\n
comment8.params=line_index
comment8.target=int\ line_length(int)
comment8.text=\r\n\ The\ line_length\ method\ will\ get\ the\ length\ of\ a\ line\ at\ line_index\r\n\r\n\ @param\ line_index\r\n\ @return\ int\r\n
comment9.params=
comment9.target=int\ line_length()
comment9.text=\r\n\ The\ line_length\ method\ will\ get\ the\ length\ of\ a\ line\ at\ the\ current\ cursor\ position\r\n\r\n\ @return\ int\r\n
numComments=31
